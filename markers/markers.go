package markers

import (
	"image"
	"image/color"
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/vector"
)

var (
	// Appears to be needed for DrawTriangles to work...
	emptyImage = ebiten.NewImage(500, 500)
)

// why is this needed!?
// DrawTriangles doesn't work unless we fill this image....
func init() {
	emptyImage.Fill(color.White)
}

func DrawAirliner(screen *ebiten.Image) {
	// Draws an Airbus A380 from SVG paths.

	// Prepare the path object
	path := vector.Path{}

	// fusilage path
	err := PathFromSVG(&path, "M 245,1.0206186 C 226.67712,1.2816975 223.51546,78.247422 223.51546,78.247422 V 309.58763 c 1.2168,28.19176 5.98384,42.32265 5.98384,42.32265 4.93731,19.91945 5.10756,39.32815 5.10756,39.32815 3.74554,22.98398 9.19359,34.39084 9.19359,34.39084 0.17025,11.06637 1.36201,18.04669 1.36201,18.04669 1.13817,-5.6318 1.68797,-17.94975 1.68797,-17.94975 4.74643,-10.65598 9.06828,-34.58803 9.06828,-34.58803 -0.20194,-19.20888 4.9891,-38.96121 4.9891,-38.96121 4.59273,-16.56663 5.96274,-42.68892 5.96274,-42.68892 l 0,-231.561561 C 262.9812,-4.7862709 245,1.0206186 245,1.0206186 Z")
	if err != nil {
		log.Fatal(err)
	}

	// Left Wing
	err = PathFromSVG(&path, "m 223.62017,113.46461 c -5.34233,10.84412 -12.15977,14.7512 -12.15977,14.7512 l -43.61723,35.92834 c 0.40458,-4.73937 0.17339,-10.5191 0.17339,-10.5191 0.17339,-8.84298 -2.0229,-14.04473 -2.0229,-14.04473 h -19.41987 c -2.02291,3.52564 -2.0807,13.40896 -2.0807,13.40896 -0.28899,11.27046 2.0229,21.21159 2.0229,21.21159 h 2.71647 c 0.34679,2.13849 0.92476,3.93021 0.92476,3.93021 l -49.06986,36.23887 c 0.92476,-4.68158 0.86696,-13.98694 0.86696,-13.98694 -0.0578,-11.27045 -2.196292,-13.92913 -2.196292,-13.92913 H 80.395954 c -2.138497,4.97056 -2.138497,13.75574 -2.138497,13.75574 0.231189,16.00984 2.022903,20.8648 2.022903,20.8648 h 2.832064 c 0.404581,2.42749 1.329337,5.31735 1.329337,5.31735 l -71.668572,53.11566 c -7.8693759,5.98644 -8.2269456,14.00622 -8.2269456,14.00622 -0.664058,3.78002 -1.1748719,17.31659 -1.1748719,17.31659 V 322.1703 C 4.495162,312.10727 5.0570572,309.80861 5.0570572,309.80861 21.145546,303.05944 85.663485,274.7157 85.663485,274.7157 c 0.487672,11.06445 1.540198,11.10343 1.540198,11.10343 1.130491,0.039 2.377928,-12.78623 2.377928,-12.78623 l 21.635249,-8.73206 c 0.35084,14.03367 1.16947,13.68283 1.16947,13.68283 1.63726,0.039 3.66435,-15.70992 3.66435,-15.70992 l 20.85559,-8.38122 c 0.42881,14.61841 1.48134,14.46248 1.48134,14.46248 1.71522,-0.50679 3.27452,-16.33364 3.27452,-16.33364 l 19.99798,-8.06936 c 0.13631,6.44018 1.37499,6.14526 1.37499,6.14526 1.35666,0.23594 2.35941,-7.78605 2.35941,-7.78605 l 9.85053,-4.01099 10.97125,-2.83129 c 0.79798,6.59716 1.35666,6.01649 1.35666,6.01649 1.1797,0.11797 2.35941,-7.07823 2.35941,-7.07823 l 29.4926,-7.78605 c 1.35666,24.77379 4.12896,35.21417 4.12896,35.21417")
	if err != nil {
		log.Fatal(err)
	}

	// Right Wing
	err = PathFromSVG(&path, "m 266.74101,113.46461 c 5.34233,10.84412 12.15977,14.7512 12.15977,14.7512 l 43.61723,35.92834 c -0.40458,-4.73937 -0.17339,-10.5191 -0.17339,-10.5191 -0.17339,-8.84298 2.0229,-14.04473 2.0229,-14.04473 h 19.41987 c 2.02291,3.52564 2.0807,13.40896 2.0807,13.40896 0.28899,11.27046 -2.0229,21.21159 -2.0229,21.21159 h -2.71647 c -0.34679,2.13849 -0.92476,3.93021 -0.92476,3.93021 l 49.06986,36.23887 c -0.92476,-4.68158 -0.86696,-13.98694 -0.86696,-13.98694 0.0578,-11.27045 2.19629,-13.92913 2.19629,-13.92913 h 19.36207 c 2.1385,4.97056 2.1385,13.75574 2.1385,13.75574 -0.23119,16.00984 -2.0229,20.8648 -2.0229,20.8648 h -2.83207 c -0.40458,2.42749 -1.32933,5.31735 -1.32933,5.31735 l 71.66857,53.11566 c 7.86937,5.98644 8.22694,14.00622 8.22694,14.00622 0.66406,3.78002 1.17487,17.31659 1.17487,17.31659 v 11.34006 c -1.12379,-10.06303 -1.68568,-12.36169 -1.68568,-12.36169 -16.08849,-6.74917 -80.60643,-35.09291 -80.60643,-35.09291 -0.48767,11.06445 -1.5402,11.10343 -1.5402,11.10343 -1.13049,0.039 -2.37792,-12.78623 -2.37792,-12.78623 l -21.63525,-8.73206 c -0.35084,14.03367 -1.16947,13.68283 -1.16947,13.68283 -1.63726,0.039 -3.66435,-15.70992 -3.66435,-15.70992 l -20.85559,-8.38122 c -0.42881,14.61841 -1.48134,14.46248 -1.48134,14.46248 -1.71522,-0.50679 -3.27452,-16.33364 -3.27452,-16.33364 l -19.99798,-8.06936 c -0.13631,6.44018 -1.37499,6.14526 -1.37499,6.14526 -1.35666,0.23594 -2.35941,-7.78605 -2.35941,-7.78605 l -9.85053,-4.01099 -10.97125,-2.83129 c -0.79798,6.59716 -1.35666,6.01649 -1.35666,6.01649 -1.1797,0.11797 -2.35941,-7.07823 -2.35941,-7.07823 l -29.4926,-7.78605 c -1.35666,24.77379 -4.12896,35.21417 -4.12896,35.21417")
	if err != nil {
		log.Fatal(err)
	}

	// Left Tail
	err = PathFromSVG(&path, "m 230.85323,357.79442 c -0.29736,5.78207 -5.61686,8.72268 -5.61686,8.72268 l -58.79963,43.5916 c -11.89402,7.35271 -13.4288,32.01367 -13.4288,32.01367 l 85.71683,-31.04793")
	if err != nil {
		log.Fatal(err)
	}

	// Get a list of verticies and indicies
	vs, is := path.AppendVerticesAndIndicesForFilling(nil, nil)

	// Set colours (not sure what SrcX/SrcY are doing... Copied from the Ebiten example: https://ebiten.org/examples/vector.html)
	for i := range vs {
		vs[i].SrcX = 1
		vs[i].SrcY = 1
		vs[i].ColorR = 0xdb / float32(0xff)
		vs[i].ColorG = 0x56 / float32(0xff)
		vs[i].ColorB = 0x20 / float32(0xff)
		vs[i].ColorA = 1
	}

	// Finally, draw the triangles!
	screen.DrawTriangles(vs, is, emptyImage.SubImage(image.Rect(0, 0, 500, 500)).(*ebiten.Image), nil)

}
