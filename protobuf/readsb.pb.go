// Part of readsb, a Mode-S/ADSB/TIS message decoder.
//
// readsb.proto: Protocol buffer scheme for aicraft data exchange,
//               receiver details and statistics.
//
// Copyright (c) 2020 Michael Wolf <michael@mictronics.de>
//
// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// any later version.
//
// This file is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: readsb.proto

package readsb_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AircraftMeta_AirGround int32

const (
	AircraftMeta_AG_INVALID   AircraftMeta_AirGround = 0
	AircraftMeta_AG_GROUND    AircraftMeta_AirGround = 1
	AircraftMeta_AG_AIRBORNE  AircraftMeta_AirGround = 2
	AircraftMeta_AG_UNCERTAIN AircraftMeta_AirGround = 3
)

// Enum value maps for AircraftMeta_AirGround.
var (
	AircraftMeta_AirGround_name = map[int32]string{
		0: "AG_INVALID",
		1: "AG_GROUND",
		2: "AG_AIRBORNE",
		3: "AG_UNCERTAIN",
	}
	AircraftMeta_AirGround_value = map[string]int32{
		"AG_INVALID":   0,
		"AG_GROUND":    1,
		"AG_AIRBORNE":  2,
		"AG_UNCERTAIN": 3,
	}
)

func (x AircraftMeta_AirGround) Enum() *AircraftMeta_AirGround {
	p := new(AircraftMeta_AirGround)
	*p = x
	return p
}

func (x AircraftMeta_AirGround) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AircraftMeta_AirGround) Descriptor() protoreflect.EnumDescriptor {
	return file_readsb_proto_enumTypes[0].Descriptor()
}

func (AircraftMeta_AirGround) Type() protoreflect.EnumType {
	return &file_readsb_proto_enumTypes[0]
}

func (x AircraftMeta_AirGround) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AircraftMeta_AirGround.Descriptor instead.
func (AircraftMeta_AirGround) EnumDescriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 0}
}

// Type of underlying message, one of:
type AircraftMeta_AddrType int32

const (
	AircraftMeta_ADDR_ADSB_ICAO      AircraftMeta_AddrType = 0 // Mode S or ADS-B, ICAO address, transponder sourced.
	AircraftMeta_ADDR_ADSB_ICAO_NT   AircraftMeta_AddrType = 1 // ADS-B, ICAO address, non-transponder.
	AircraftMeta_ADDR_ADSR_ICAO      AircraftMeta_AddrType = 2 // ADS-R, ICAO address.
	AircraftMeta_ADDR_TISB_ICAO      AircraftMeta_AddrType = 3 // TIS-B, ICAO address.
	AircraftMeta_ADDR_ADSB_OTHER     AircraftMeta_AddrType = 4 // ADS-B, other address format.
	AircraftMeta_ADDR_ADSR_OTHER     AircraftMeta_AddrType = 5 // ADS-R, other address format.
	AircraftMeta_ADDR_TISB_TRACKFILE AircraftMeta_AddrType = 6 // TIS-B, Mode A code + track file number.
	AircraftMeta_ADDR_TISB_OTHER     AircraftMeta_AddrType = 7 // TIS-B, other address format.
	AircraftMeta_ADDR_MODE_A         AircraftMeta_AddrType = 8 // Mode A.
	AircraftMeta_ADDR_UNKNOWN        AircraftMeta_AddrType = 9 // Unknown address format.
)

// Enum value maps for AircraftMeta_AddrType.
var (
	AircraftMeta_AddrType_name = map[int32]string{
		0: "ADDR_ADSB_ICAO",
		1: "ADDR_ADSB_ICAO_NT",
		2: "ADDR_ADSR_ICAO",
		3: "ADDR_TISB_ICAO",
		4: "ADDR_ADSB_OTHER",
		5: "ADDR_ADSR_OTHER",
		6: "ADDR_TISB_TRACKFILE",
		7: "ADDR_TISB_OTHER",
		8: "ADDR_MODE_A",
		9: "ADDR_UNKNOWN",
	}
	AircraftMeta_AddrType_value = map[string]int32{
		"ADDR_ADSB_ICAO":      0,
		"ADDR_ADSB_ICAO_NT":   1,
		"ADDR_ADSR_ICAO":      2,
		"ADDR_TISB_ICAO":      3,
		"ADDR_ADSB_OTHER":     4,
		"ADDR_ADSR_OTHER":     5,
		"ADDR_TISB_TRACKFILE": 6,
		"ADDR_TISB_OTHER":     7,
		"ADDR_MODE_A":         8,
		"ADDR_UNKNOWN":        9,
	}
)

func (x AircraftMeta_AddrType) Enum() *AircraftMeta_AddrType {
	p := new(AircraftMeta_AddrType)
	*p = x
	return p
}

func (x AircraftMeta_AddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AircraftMeta_AddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_readsb_proto_enumTypes[1].Descriptor()
}

func (AircraftMeta_AddrType) Type() protoreflect.EnumType {
	return &file_readsb_proto_enumTypes[1]
}

func (x AircraftMeta_AddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AircraftMeta_AddrType.Descriptor instead.
func (AircraftMeta_AddrType) EnumDescriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 1}
}

// ADS-B emergency/priority status, a superset of the 7x00 squawks
type AircraftMeta_Emergency int32

const (
	AircraftMeta_EMERGENCY_NONE      AircraftMeta_Emergency = 0
	AircraftMeta_EMERGENCY_GENERAL   AircraftMeta_Emergency = 1
	AircraftMeta_EMERGENCY_LIFEGUARD AircraftMeta_Emergency = 2
	AircraftMeta_EMERGENCY_MINFUEL   AircraftMeta_Emergency = 3
	AircraftMeta_EMERGENCY_NORDO     AircraftMeta_Emergency = 4
	AircraftMeta_EMERGENCY_UNLAWFUL  AircraftMeta_Emergency = 5
	AircraftMeta_EMERGENCY_DOWNED    AircraftMeta_Emergency = 6
	AircraftMeta_EMERGENCY_RESERVED  AircraftMeta_Emergency = 7
)

// Enum value maps for AircraftMeta_Emergency.
var (
	AircraftMeta_Emergency_name = map[int32]string{
		0: "EMERGENCY_NONE",
		1: "EMERGENCY_GENERAL",
		2: "EMERGENCY_LIFEGUARD",
		3: "EMERGENCY_MINFUEL",
		4: "EMERGENCY_NORDO",
		5: "EMERGENCY_UNLAWFUL",
		6: "EMERGENCY_DOWNED",
		7: "EMERGENCY_RESERVED",
	}
	AircraftMeta_Emergency_value = map[string]int32{
		"EMERGENCY_NONE":      0,
		"EMERGENCY_GENERAL":   1,
		"EMERGENCY_LIFEGUARD": 2,
		"EMERGENCY_MINFUEL":   3,
		"EMERGENCY_NORDO":     4,
		"EMERGENCY_UNLAWFUL":  5,
		"EMERGENCY_DOWNED":    6,
		"EMERGENCY_RESERVED":  7,
	}
)

func (x AircraftMeta_Emergency) Enum() *AircraftMeta_Emergency {
	p := new(AircraftMeta_Emergency)
	*p = x
	return p
}

func (x AircraftMeta_Emergency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AircraftMeta_Emergency) Descriptor() protoreflect.EnumDescriptor {
	return file_readsb_proto_enumTypes[2].Descriptor()
}

func (AircraftMeta_Emergency) Type() protoreflect.EnumType {
	return &file_readsb_proto_enumTypes[2]
}

func (x AircraftMeta_Emergency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AircraftMeta_Emergency.Descriptor instead.
func (AircraftMeta_Emergency) EnumDescriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 2}
}

// Interpretation of SIL: unknown, perhour, persample.
type AircraftMeta_SilType int32

const (
	AircraftMeta_SIL_INVALID    AircraftMeta_SilType = 0
	AircraftMeta_SIL_UNKNOWN    AircraftMeta_SilType = 1
	AircraftMeta_SIL_PER_SAMPLE AircraftMeta_SilType = 2
	AircraftMeta_SIL_PER_HOUR   AircraftMeta_SilType = 3
)

// Enum value maps for AircraftMeta_SilType.
var (
	AircraftMeta_SilType_name = map[int32]string{
		0: "SIL_INVALID",
		1: "SIL_UNKNOWN",
		2: "SIL_PER_SAMPLE",
		3: "SIL_PER_HOUR",
	}
	AircraftMeta_SilType_value = map[string]int32{
		"SIL_INVALID":    0,
		"SIL_UNKNOWN":    1,
		"SIL_PER_SAMPLE": 2,
		"SIL_PER_HOUR":   3,
	}
)

func (x AircraftMeta_SilType) Enum() *AircraftMeta_SilType {
	p := new(AircraftMeta_SilType)
	*p = x
	return p
}

func (x AircraftMeta_SilType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AircraftMeta_SilType) Descriptor() protoreflect.EnumDescriptor {
	return file_readsb_proto_enumTypes[3].Descriptor()
}

func (AircraftMeta_SilType) Type() protoreflect.EnumType {
	return &file_readsb_proto_enumTypes[3]
}

func (x AircraftMeta_SilType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AircraftMeta_SilType.Descriptor instead.
func (AircraftMeta_SilType) EnumDescriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 3}
}

//*
// Readsb single tracked aircraft meta data.
type AircraftMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr           uint32                    `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`                               // The 24-bit ICAO identifier of the aircraft, as 6 hex digits. The identifier may start with '~', this means that the address is a non-ICAO address (e.g. from TIS-B).
	Flight         string                    `protobuf:"bytes,2,opt,name=flight,proto3" json:"flight,omitempty"`                            // Callsign, the flight name or aircraft registration as 8 chars.
	Squawk         uint32                    `protobuf:"varint,3,opt,name=squawk,proto3" json:"squawk,omitempty"`                           // Mode A code (Squawk), encoded as 4 octal digits.
	Category       uint32                    `protobuf:"varint,4,opt,name=category,proto3" json:"category,omitempty"`                       // Emitter category to identify particular aircraft or vehicle classes (values A0 - D7).
	AltBaro        int32                     `protobuf:"varint,5,opt,name=alt_baro,json=altBaro,proto3" json:"alt_baro,omitempty"`          // The aircraft barometric altitude in feet.
	MagHeading     int32                     `protobuf:"varint,6,opt,name=mag_heading,json=magHeading,proto3" json:"mag_heading,omitempty"` // Heading, degrees clockwise from magnetic north.
	Ias            uint32                    `protobuf:"varint,7,opt,name=ias,proto3" json:"ias,omitempty"`                                 // Indicated air speed in knots.
	Lat            float64                   `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`                                // Aircraft position latitude in decimal degrees.
	Lon            float64                   `protobuf:"fixed64,9,opt,name=lon,proto3" json:"lon,omitempty"`                                // Aircraft position longitude in decimal degrees.
	Messages       uint64                    `protobuf:"varint,10,opt,name=messages,proto3" json:"messages,omitempty"`                      // Total number of Mode S messages received from this aircraft.
	Seen           uint64                    `protobuf:"varint,11,opt,name=seen,proto3" json:"seen,omitempty"`                              // When a message was last received from this aircraft. (in milliseconds!!!)
	Rssi           float32                   `protobuf:"fixed32,12,opt,name=rssi,proto3" json:"rssi,omitempty"`                             // Recent average RSSI (signal power), in dbFS; this will always be negative.
	Distance       uint32                    `protobuf:"varint,13,opt,name=distance,proto3" json:"distance,omitempty"`                      // Distance to site in meter.
	AirGround      AircraftMeta_AirGround    `protobuf:"varint,15,opt,name=air_ground,json=airGround,proto3,enum=AircraftMeta_AirGround" json:"air_ground,omitempty"`
	AltGeom        int32                     `protobuf:"varint,20,opt,name=alt_geom,json=altGeom,proto3" json:"alt_geom,omitempty"`                        // Geometric (GNSS / INS) altitude in feet referenced to the WGS84 ellipsoid.
	BaroRate       int32                     `protobuf:"varint,21,opt,name=baro_rate,json=baroRate,proto3" json:"baro_rate,omitempty"`                     // Rate of change of barometric altitude, feet/minute.
	GeomRate       int32                     `protobuf:"varint,22,opt,name=geom_rate,json=geomRate,proto3" json:"geom_rate,omitempty"`                     // Rate of change of geometric (GNSS / INS) altitude. feet/minute
	Gs             uint32                    `protobuf:"varint,23,opt,name=gs,proto3" json:"gs,omitempty"`                                                 // Ground speed in knots.
	Tas            uint32                    `protobuf:"varint,24,opt,name=tas,proto3" json:"tas,omitempty"`                                               // True air speed in knots.
	Mach           float32                   `protobuf:"fixed32,25,opt,name=mach,proto3" json:"mach,omitempty"`                                            // Mach number.
	TrueHeading    int32                     `protobuf:"varint,26,opt,name=true_heading,json=trueHeading,proto3" json:"true_heading,omitempty"`            // Heading, degrees clockwise from true north.
	Track          int32                     `protobuf:"varint,27,opt,name=track,proto3" json:"track,omitempty"`                                           // True track over ground in degrees (0-359).
	TrackRate      float32                   `protobuf:"fixed32,28,opt,name=track_rate,json=trackRate,proto3" json:"track_rate,omitempty"`                 // Rate of change of track, degrees/second.
	Roll           float32                   `protobuf:"fixed32,29,opt,name=roll,proto3" json:"roll,omitempty"`                                            // Roll, degrees, negative is left roll.
	NavQnh         float32                   `protobuf:"fixed32,30,opt,name=nav_qnh,json=navQnh,proto3" json:"nav_qnh,omitempty"`                          // Navigation Accuracy for Velocity.
	NavAltitudeMcp int32                     `protobuf:"varint,31,opt,name=nav_altitude_mcp,json=navAltitudeMcp,proto3" json:"nav_altitude_mcp,omitempty"` // Selected altitude from the Mode Control Panel / Flight Control Unit (MCP/FCU) or equivalent equipment.
	NavAltitudeFms int32                     `protobuf:"varint,32,opt,name=nav_altitude_fms,json=navAltitudeFms,proto3" json:"nav_altitude_fms,omitempty"` // Selected altitude from the Flight Management System (FMS).
	NavHeading     int32                     `protobuf:"varint,33,opt,name=nav_heading,json=navHeading,proto3" json:"nav_heading,omitempty"`               // Selected heading (True or Magnetic is not defined in DO-260B, mostly Magnetic as that is the de facto standard).
	Nic            uint32                    `protobuf:"varint,34,opt,name=nic,proto3" json:"nic,omitempty"`                                               // Navigation Integrity Category.
	Rc             uint32                    `protobuf:"varint,35,opt,name=rc,proto3" json:"rc,omitempty"`                                                 // Radius of Containment, meters; a measure of position integrity derived from NIC & supplementary bits.
	Version        int32                     `protobuf:"varint,36,opt,name=version,proto3" json:"version,omitempty"`                                       // ADS-B Version Number 0, 1, 2 (3-7 are reserved)
	NicBaro        uint32                    `protobuf:"varint,37,opt,name=nic_baro,json=nicBaro,proto3" json:"nic_baro,omitempty"`                        // Navigation Integrity Category for Barometric Altitude
	NacP           uint32                    `protobuf:"varint,38,opt,name=nac_p,json=nacP,proto3" json:"nac_p,omitempty"`                                 // Navigation Accuracy for Position
	NacV           uint32                    `protobuf:"varint,39,opt,name=nac_v,json=nacV,proto3" json:"nac_v,omitempty"`                                 // Navigation Accuracy for Velocity
	Sil            uint32                    `protobuf:"varint,40,opt,name=sil,proto3" json:"sil,omitempty"`                                               // Source Integity Level
	SeenPos        uint32                    `protobuf:"varint,41,opt,name=seen_pos,json=seenPos,proto3" json:"seen_pos,omitempty"`                        // How long ago (in seconds before "now") the position was last updated.
	Alert          bool                      `protobuf:"varint,42,opt,name=alert,proto3" json:"alert,omitempty"`                                           // Flight status alert bit.
	Spi            bool                      `protobuf:"varint,43,opt,name=spi,proto3" json:"spi,omitempty"`                                               // Flight status special position identification bit.
	Gva            uint32                    `protobuf:"varint,44,opt,name=gva,proto3" json:"gva,omitempty"`                                               // Geometric Vertical Accuracy
	Sda            uint32                    `protobuf:"varint,45,opt,name=sda,proto3" json:"sda,omitempty"`                                               // System Design Assurance
	Declination    float64                   `protobuf:"fixed64,46,opt,name=declination,proto3" json:"declination,omitempty"`                              // Geomagnetic declination depending on position
	WindSpeed      uint32                    `protobuf:"varint,47,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`                  // Calculated wind speed
	WindDirection  uint32                    `protobuf:"varint,48,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`      // Calculated wind direction
	AddrType       AircraftMeta_AddrType     `protobuf:"varint,100,opt,name=addr_type,json=addrType,proto3,enum=AircraftMeta_AddrType" json:"addr_type,omitempty"`
	Emergency      AircraftMeta_Emergency    `protobuf:"varint,101,opt,name=emergency,proto3,enum=AircraftMeta_Emergency" json:"emergency,omitempty"`
	SilType        AircraftMeta_SilType      `protobuf:"varint,102,opt,name=sil_type,json=silType,proto3,enum=AircraftMeta_SilType" json:"sil_type,omitempty"`
	NavModes       *AircraftMeta_NavModes    `protobuf:"bytes,150,opt,name=nav_modes,json=navModes,proto3" json:"nav_modes,omitempty"`
	ValidSource    *AircraftMeta_ValidSource `protobuf:"bytes,151,opt,name=valid_source,json=validSource,proto3" json:"valid_source,omitempty"`
}

func (x *AircraftMeta) Reset() {
	*x = AircraftMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftMeta) ProtoMessage() {}

func (x *AircraftMeta) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftMeta.ProtoReflect.Descriptor instead.
func (*AircraftMeta) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0}
}

func (x *AircraftMeta) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *AircraftMeta) GetFlight() string {
	if x != nil {
		return x.Flight
	}
	return ""
}

func (x *AircraftMeta) GetSquawk() uint32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *AircraftMeta) GetCategory() uint32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *AircraftMeta) GetAltBaro() int32 {
	if x != nil {
		return x.AltBaro
	}
	return 0
}

func (x *AircraftMeta) GetMagHeading() int32 {
	if x != nil {
		return x.MagHeading
	}
	return 0
}

func (x *AircraftMeta) GetIas() uint32 {
	if x != nil {
		return x.Ias
	}
	return 0
}

func (x *AircraftMeta) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *AircraftMeta) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *AircraftMeta) GetMessages() uint64 {
	if x != nil {
		return x.Messages
	}
	return 0
}

func (x *AircraftMeta) GetSeen() uint64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

func (x *AircraftMeta) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *AircraftMeta) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *AircraftMeta) GetAirGround() AircraftMeta_AirGround {
	if x != nil {
		return x.AirGround
	}
	return AircraftMeta_AG_INVALID
}

func (x *AircraftMeta) GetAltGeom() int32 {
	if x != nil {
		return x.AltGeom
	}
	return 0
}

func (x *AircraftMeta) GetBaroRate() int32 {
	if x != nil {
		return x.BaroRate
	}
	return 0
}

func (x *AircraftMeta) GetGeomRate() int32 {
	if x != nil {
		return x.GeomRate
	}
	return 0
}

func (x *AircraftMeta) GetGs() uint32 {
	if x != nil {
		return x.Gs
	}
	return 0
}

func (x *AircraftMeta) GetTas() uint32 {
	if x != nil {
		return x.Tas
	}
	return 0
}

func (x *AircraftMeta) GetMach() float32 {
	if x != nil {
		return x.Mach
	}
	return 0
}

func (x *AircraftMeta) GetTrueHeading() int32 {
	if x != nil {
		return x.TrueHeading
	}
	return 0
}

func (x *AircraftMeta) GetTrack() int32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *AircraftMeta) GetTrackRate() float32 {
	if x != nil {
		return x.TrackRate
	}
	return 0
}

func (x *AircraftMeta) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *AircraftMeta) GetNavQnh() float32 {
	if x != nil {
		return x.NavQnh
	}
	return 0
}

func (x *AircraftMeta) GetNavAltitudeMcp() int32 {
	if x != nil {
		return x.NavAltitudeMcp
	}
	return 0
}

func (x *AircraftMeta) GetNavAltitudeFms() int32 {
	if x != nil {
		return x.NavAltitudeFms
	}
	return 0
}

func (x *AircraftMeta) GetNavHeading() int32 {
	if x != nil {
		return x.NavHeading
	}
	return 0
}

func (x *AircraftMeta) GetNic() uint32 {
	if x != nil {
		return x.Nic
	}
	return 0
}

func (x *AircraftMeta) GetRc() uint32 {
	if x != nil {
		return x.Rc
	}
	return 0
}

func (x *AircraftMeta) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AircraftMeta) GetNicBaro() uint32 {
	if x != nil {
		return x.NicBaro
	}
	return 0
}

func (x *AircraftMeta) GetNacP() uint32 {
	if x != nil {
		return x.NacP
	}
	return 0
}

func (x *AircraftMeta) GetNacV() uint32 {
	if x != nil {
		return x.NacV
	}
	return 0
}

func (x *AircraftMeta) GetSil() uint32 {
	if x != nil {
		return x.Sil
	}
	return 0
}

func (x *AircraftMeta) GetSeenPos() uint32 {
	if x != nil {
		return x.SeenPos
	}
	return 0
}

func (x *AircraftMeta) GetAlert() bool {
	if x != nil {
		return x.Alert
	}
	return false
}

func (x *AircraftMeta) GetSpi() bool {
	if x != nil {
		return x.Spi
	}
	return false
}

func (x *AircraftMeta) GetGva() uint32 {
	if x != nil {
		return x.Gva
	}
	return 0
}

func (x *AircraftMeta) GetSda() uint32 {
	if x != nil {
		return x.Sda
	}
	return 0
}

func (x *AircraftMeta) GetDeclination() float64 {
	if x != nil {
		return x.Declination
	}
	return 0
}

func (x *AircraftMeta) GetWindSpeed() uint32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *AircraftMeta) GetWindDirection() uint32 {
	if x != nil {
		return x.WindDirection
	}
	return 0
}

func (x *AircraftMeta) GetAddrType() AircraftMeta_AddrType {
	if x != nil {
		return x.AddrType
	}
	return AircraftMeta_ADDR_ADSB_ICAO
}

func (x *AircraftMeta) GetEmergency() AircraftMeta_Emergency {
	if x != nil {
		return x.Emergency
	}
	return AircraftMeta_EMERGENCY_NONE
}

func (x *AircraftMeta) GetSilType() AircraftMeta_SilType {
	if x != nil {
		return x.SilType
	}
	return AircraftMeta_SIL_INVALID
}

func (x *AircraftMeta) GetNavModes() *AircraftMeta_NavModes {
	if x != nil {
		return x.NavModes
	}
	return nil
}

func (x *AircraftMeta) GetValidSource() *AircraftMeta_ValidSource {
	if x != nil {
		return x.ValidSource
	}
	return nil
}

type AircraftHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    uint32  `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`                      // The 24-bit ICAO identifier of the aircraft, as 6 hex digits.
	AltBaro int32   `protobuf:"varint,5,opt,name=alt_baro,json=altBaro,proto3" json:"alt_baro,omitempty"` // The aircraft barometric altitude in feet.
	Lat     float64 `protobuf:"fixed64,8,opt,name=lat,proto3" json:"lat,omitempty"`                       // Aircraft position latitude in decimal degrees.
	Lon     float64 `protobuf:"fixed64,9,opt,name=lon,proto3" json:"lon,omitempty"`                       // Aircraft position longitude in decimal degrees.
}

func (x *AircraftHistory) Reset() {
	*x = AircraftHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftHistory) ProtoMessage() {}

func (x *AircraftHistory) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftHistory.ProtoReflect.Descriptor instead.
func (*AircraftHistory) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{1}
}

func (x *AircraftHistory) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *AircraftHistory) GetAltBaro() int32 {
	if x != nil {
		return x.AltBaro
	}
	return 0
}

func (x *AircraftHistory) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *AircraftHistory) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

//*
// Collection of tracked aircrafts.
type AircraftsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now      uint64             `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`           // The time this file was generated, in seconds since Unix epoch.
	Messages uint64             `protobuf:"varint,2,opt,name=messages,proto3" json:"messages,omitempty"` // The total number of Mode S messages processed since readsb started.
	History  []*AircraftHistory `protobuf:"bytes,14,rep,name=history,proto3" json:"history,omitempty"`   // Aircraft position history collection.
	Aircraft []*AircraftMeta    `protobuf:"bytes,15,rep,name=aircraft,proto3" json:"aircraft,omitempty"` // The aircraft collection.
}

func (x *AircraftsUpdate) Reset() {
	*x = AircraftsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftsUpdate) ProtoMessage() {}

func (x *AircraftsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftsUpdate.ProtoReflect.Descriptor instead.
func (*AircraftsUpdate) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{2}
}

func (x *AircraftsUpdate) GetNow() uint64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *AircraftsUpdate) GetMessages() uint64 {
	if x != nil {
		return x.Messages
	}
	return 0
}

func (x *AircraftsUpdate) GetHistory() []*AircraftHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *AircraftsUpdate) GetAircraft() []*AircraftMeta {
	if x != nil {
		return x.Aircraft
	}
	return nil
}

//*
// Readsb receiver details.
type Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                          // Readsb version
	Refresh         float32 `protobuf:"fixed32,2,opt,name=refresh,proto3" json:"refresh,omitempty"`                                        // Data refresh period.
	Latitude        float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`                                      // Receiver location latitude.
	Longitude       float64 `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`                                    // Receiver location longitude.
	Altitude        uint32  `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`                                       // Receiver altitude.
	AntennaSerial   uint32  `protobuf:"varint,6,opt,name=antenna_serial,json=antennaSerial,proto3" json:"antenna_serial,omitempty"`        // Antenna serial number.
	AntennaFlags    uint32  `protobuf:"varint,7,opt,name=antenna_flags,json=antennaFlags,proto3" json:"antenna_flags,omitempty"`           // Antenna status flags.
	AntennaGpsSats  uint32  `protobuf:"varint,8,opt,name=antenna_gps_sats,json=antennaGpsSats,proto3" json:"antenna_gps_sats,omitempty"`   // Antenna GPS satellites used in fix.
	AntennaGpsHdop  uint32  `protobuf:"varint,9,opt,name=antenna_gps_hdop,json=antennaGpsHdop,proto3" json:"antenna_gps_hdop,omitempty"`   // Antenna GPS HDOP*10, thus 12 is HDOP 1.2.
	AntennaReserved uint32  `protobuf:"varint,14,opt,name=antenna_reserved,json=antennaReserved,proto3" json:"antenna_reserved,omitempty"` // Antenna internal use.
	History         uint32  `protobuf:"varint,15,opt,name=history,proto3" json:"history,omitempty"`                                        // Aircraft history size.
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{3}
}

func (x *Receiver) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Receiver) GetRefresh() float32 {
	if x != nil {
		return x.Refresh
	}
	return 0
}

func (x *Receiver) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Receiver) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Receiver) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Receiver) GetAntennaSerial() uint32 {
	if x != nil {
		return x.AntennaSerial
	}
	return 0
}

func (x *Receiver) GetAntennaFlags() uint32 {
	if x != nil {
		return x.AntennaFlags
	}
	return 0
}

func (x *Receiver) GetAntennaGpsSats() uint32 {
	if x != nil {
		return x.AntennaGpsSats
	}
	return 0
}

func (x *Receiver) GetAntennaGpsHdop() uint32 {
	if x != nil {
		return x.AntennaGpsHdop
	}
	return 0
}

func (x *Receiver) GetAntennaReserved() uint32 {
	if x != nil {
		return x.AntennaReserved
	}
	return 0
}

func (x *Receiver) GetHistory() uint32 {
	if x != nil {
		return x.History
	}
	return 0
}

//*
// Single statistcs entry.
type StatisticEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start                      uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`       // the start time (in seconds-since-1-Jan-1970) of this statistics collection period.
	Stop                       uint64 `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`         // the end time (in seconds-since-1-Jan-1970) of this statistics collection period.
	Messages                   uint64 `protobuf:"varint,3,opt,name=messages,proto3" json:"messages,omitempty"` // total number of messages accepted by readsb from any source
	MaxDistanceInMetres        uint32 `protobuf:"varint,4,opt,name=max_distance_in_metres,json=maxDistanceInMetres,proto3" json:"max_distance_in_metres,omitempty"`
	MaxDistanceInNauticalMiles uint32 `protobuf:"varint,5,opt,name=max_distance_in_nautical_miles,json=maxDistanceInNauticalMiles,proto3" json:"max_distance_in_nautical_miles,omitempty"`
	AltitudeSuppressed         uint64 `protobuf:"varint,6,opt,name=altitude_suppressed,json=altitudeSuppressed,proto3" json:"altitude_suppressed,omitempty"`
	TracksNew                  uint64 `protobuf:"varint,7,opt,name=tracks_new,json=tracksNew,proto3" json:"tracks_new,omitempty"`                                 // total tracks (aircrafts) created. Each track represents a unique aircraft and persists for up to 5 minutes.
	TracksSingleMessage        uint64 `protobuf:"varint,8,opt,name=tracks_single_message,json=tracksSingleMessage,proto3" json:"tracks_single_message,omitempty"` // tracks consisting of only a single message. These are usually due to message decoding errors that produce a bad aircraft address.
	TracksWithPosition         uint64 `protobuf:"varint,9,opt,name=tracks_with_position,json=tracksWithPosition,proto3" json:"tracks_with_position,omitempty"`
	TracksMlatPosition         uint64 `protobuf:"varint,10,opt,name=tracks_mlat_position,json=tracksMlatPosition,proto3" json:"tracks_mlat_position,omitempty"`
	TracksTisbPosition         uint64 `protobuf:"varint,11,opt,name=tracks_tisb_position,json=tracksTisbPosition,proto3" json:"tracks_tisb_position,omitempty"`
	// statistics about CPU use
	CpuDemod      uint64 `protobuf:"varint,20,opt,name=cpu_demod,json=cpuDemod,proto3" json:"cpu_demod,omitempty"`                // milliseconds spent doing demodulation and decoding in response to data from a SDR dongle
	CpuReader     uint64 `protobuf:"varint,21,opt,name=cpu_reader,json=cpuReader,proto3" json:"cpu_reader,omitempty"`             // milliseconds spent reading sample data over USB from a SDR dongle
	CpuBackground uint64 `protobuf:"varint,22,opt,name=cpu_background,json=cpuBackground,proto3" json:"cpu_background,omitempty"` // milliseconds spent doing network I/O, processing received network messages, and periodic tasks.
	// statistics about Compact Position Report message decoding.
	CprSurface               uint64 `protobuf:"varint,40,opt,name=cpr_surface,json=cprSurface,proto3" json:"cpr_surface,omitempty"`                                               // total number of surface CPR messages received
	CprAirborne              uint64 `protobuf:"varint,41,opt,name=cpr_airborne,json=cprAirborne,proto3" json:"cpr_airborne,omitempty"`                                            // total number of airborne CPR messages received
	CprGlobalOk              uint64 `protobuf:"varint,42,opt,name=cpr_global_ok,json=cprGlobalOk,proto3" json:"cpr_global_ok,omitempty"`                                          // global positions successfuly derived
	CprGlobalBad             uint64 `protobuf:"varint,43,opt,name=cpr_global_bad,json=cprGlobalBad,proto3" json:"cpr_global_bad,omitempty"`                                       // global positions that were rejected because they were inconsistent
	CprGlobalRange           uint64 `protobuf:"varint,44,opt,name=cpr_global_range,json=cprGlobalRange,proto3" json:"cpr_global_range,omitempty"`                                 // global positions that were rejected because they exceeded the receiver max range
	CprGlobalSpeed           uint64 `protobuf:"varint,45,opt,name=cpr_global_speed,json=cprGlobalSpeed,proto3" json:"cpr_global_speed,omitempty"`                                 // global positions that were rejected because they failed the inter-position speed check
	CprGlobalSkipped         uint64 `protobuf:"varint,46,opt,name=cpr_global_skipped,json=cprGlobalSkipped,proto3" json:"cpr_global_skipped,omitempty"`                           // global position attempts skipped because we did not have the right data (e.g. even/odd messages crossed a zone boundary)
	CprLocalOk               uint64 `protobuf:"varint,47,opt,name=cpr_local_ok,json=cprLocalOk,proto3" json:"cpr_local_ok,omitempty"`                                             // local (relative) positions successfully found
	CprLocalAircraftRelative uint64 `protobuf:"varint,48,opt,name=cpr_local_aircraft_relative,json=cprLocalAircraftRelative,proto3" json:"cpr_local_aircraft_relative,omitempty"` // local positions found relative to a previous aircraft position
	CprLocalReceiverRelative uint64 `protobuf:"varint,49,opt,name=cpr_local_receiver_relative,json=cprLocalReceiverRelative,proto3" json:"cpr_local_receiver_relative,omitempty"` // local positions found relative to the receiver position
	CprLocalSkipped          uint64 `protobuf:"varint,50,opt,name=cpr_local_skipped,json=cprLocalSkipped,proto3" json:"cpr_local_skipped,omitempty"`                              // local (relative) positions not used because we did not have the right data
	CprLocalRange            uint64 `protobuf:"varint,51,opt,name=cpr_local_range,json=cprLocalRange,proto3" json:"cpr_local_range,omitempty"`                                    // local positions not used because they exceeded the receiver max range or fell into the ambiguous part of the receiver range
	CprLocalSpeed            uint64 `protobuf:"varint,52,opt,name=cpr_local_speed,json=cprLocalSpeed,proto3" json:"cpr_local_speed,omitempty"`                                    // local positions not used because they failed the inter-position speed check
	CprFiltered              uint64 `protobuf:"varint,53,opt,name=cpr_filtered,json=cprFiltered,proto3" json:"cpr_filtered,omitempty"`                                            // number of CPR messages ignored because they matched one of the heuristics for faulty transponder output
	// statistics about messages received from remote clients. Only present in --net or --net-only mode.
	RemoteModeac      uint64 `protobuf:"varint,70,opt,name=remote_modeac,json=remoteModeac,proto3" json:"remote_modeac,omitempty"`                  // number of Mode A / C messages received.
	RemoteModes       uint64 `protobuf:"varint,71,opt,name=remote_modes,json=remoteModes,proto3" json:"remote_modes,omitempty"`                     // number of Mode S messages received.
	RemoteBad         uint64 `protobuf:"varint,72,opt,name=remote_bad,json=remoteBad,proto3" json:"remote_bad,omitempty"`                           // number of Mode S messages that had bad CRC or were otherwise invalid.
	RemoteUnknownIcao uint64 `protobuf:"varint,73,opt,name=remote_unknown_icao,json=remoteUnknownIcao,proto3" json:"remote_unknown_icao,omitempty"` // number of Mode S messages which looked like they might be valid but we didn't recognize the ICAO address and it was one of the message types where we can't be sure it's valid in this case.
	RemoteAccepted    uint64 `protobuf:"varint,74,opt,name=remote_accepted,json=remoteAccepted,proto3" json:"remote_accepted,omitempty"`            // number of valid Mode S messages accepted with N-bit errors corrected.
	// statistics about messages received from a local SDR dongle. Not present in --net-only mode.
	LocalSamplesProcessed uint64  `protobuf:"varint,90,opt,name=local_samples_processed,json=localSamplesProcessed,proto3" json:"local_samples_processed,omitempty"` // number of sample blocks processed
	LocalSamplesDropped   uint64  `protobuf:"varint,91,opt,name=local_samples_dropped,json=localSamplesDropped,proto3" json:"local_samples_dropped,omitempty"`       // number of sample blocks dropped before processing. A nonzero value means CPU overload.
	LocalModeac           uint64  `protobuf:"varint,92,opt,name=local_modeac,json=localModeac,proto3" json:"local_modeac,omitempty"`                                 // number of Mode A / C messages decoded
	LocalModes            uint64  `protobuf:"varint,93,opt,name=local_modes,json=localModes,proto3" json:"local_modes,omitempty"`                                    // number of Mode S preambles received. This is *not* the number of valid messages!
	LocalBad              uint64  `protobuf:"varint,94,opt,name=local_bad,json=localBad,proto3" json:"local_bad,omitempty"`                                          // number of Mode S preambles that didn't result in a valid message
	LocalUnknownIcao      uint64  `protobuf:"varint,95,opt,name=local_unknown_icao,json=localUnknownIcao,proto3" json:"local_unknown_icao,omitempty"`                // number of Mode S preambles which looked like they might be valid but we didn't recognize the ICAO address and it was one of the message types where we can't be sure it's valid in this case.
	LocalStrongSignals    uint64  `protobuf:"varint,96,opt,name=local_strong_signals,json=localStrongSignals,proto3" json:"local_strong_signals,omitempty"`          // number of messages received that had a signal power above -3dBFS.
	LocalSignal           float32 `protobuf:"fixed32,97,opt,name=local_signal,json=localSignal,proto3" json:"local_signal,omitempty"`                                // mean signal power of successfully received messages, in dbFS; always negative.
	LocalNoise            float32 `protobuf:"fixed32,98,opt,name=local_noise,json=localNoise,proto3" json:"local_noise,omitempty"`                                   // calculated receiver noise floor level.
	LocalPeakSignal       float32 `protobuf:"fixed32,99,opt,name=local_peak_signal,json=localPeakSignal,proto3" json:"local_peak_signal,omitempty"`                  // peak signal power of a successfully received message, in dbFS; always negative.
	LocalAccepted         uint64  `protobuf:"varint,100,opt,name=local_accepted,json=localAccepted,proto3" json:"local_accepted,omitempty"`                          // the number of valid Mode S messages accepted with N-bit errors corrected.
}

func (x *StatisticEntry) Reset() {
	*x = StatisticEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticEntry) ProtoMessage() {}

func (x *StatisticEntry) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticEntry.ProtoReflect.Descriptor instead.
func (*StatisticEntry) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{4}
}

func (x *StatisticEntry) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *StatisticEntry) GetStop() uint64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *StatisticEntry) GetMessages() uint64 {
	if x != nil {
		return x.Messages
	}
	return 0
}

func (x *StatisticEntry) GetMaxDistanceInMetres() uint32 {
	if x != nil {
		return x.MaxDistanceInMetres
	}
	return 0
}

func (x *StatisticEntry) GetMaxDistanceInNauticalMiles() uint32 {
	if x != nil {
		return x.MaxDistanceInNauticalMiles
	}
	return 0
}

func (x *StatisticEntry) GetAltitudeSuppressed() uint64 {
	if x != nil {
		return x.AltitudeSuppressed
	}
	return 0
}

func (x *StatisticEntry) GetTracksNew() uint64 {
	if x != nil {
		return x.TracksNew
	}
	return 0
}

func (x *StatisticEntry) GetTracksSingleMessage() uint64 {
	if x != nil {
		return x.TracksSingleMessage
	}
	return 0
}

func (x *StatisticEntry) GetTracksWithPosition() uint64 {
	if x != nil {
		return x.TracksWithPosition
	}
	return 0
}

func (x *StatisticEntry) GetTracksMlatPosition() uint64 {
	if x != nil {
		return x.TracksMlatPosition
	}
	return 0
}

func (x *StatisticEntry) GetTracksTisbPosition() uint64 {
	if x != nil {
		return x.TracksTisbPosition
	}
	return 0
}

func (x *StatisticEntry) GetCpuDemod() uint64 {
	if x != nil {
		return x.CpuDemod
	}
	return 0
}

func (x *StatisticEntry) GetCpuReader() uint64 {
	if x != nil {
		return x.CpuReader
	}
	return 0
}

func (x *StatisticEntry) GetCpuBackground() uint64 {
	if x != nil {
		return x.CpuBackground
	}
	return 0
}

func (x *StatisticEntry) GetCprSurface() uint64 {
	if x != nil {
		return x.CprSurface
	}
	return 0
}

func (x *StatisticEntry) GetCprAirborne() uint64 {
	if x != nil {
		return x.CprAirborne
	}
	return 0
}

func (x *StatisticEntry) GetCprGlobalOk() uint64 {
	if x != nil {
		return x.CprGlobalOk
	}
	return 0
}

func (x *StatisticEntry) GetCprGlobalBad() uint64 {
	if x != nil {
		return x.CprGlobalBad
	}
	return 0
}

func (x *StatisticEntry) GetCprGlobalRange() uint64 {
	if x != nil {
		return x.CprGlobalRange
	}
	return 0
}

func (x *StatisticEntry) GetCprGlobalSpeed() uint64 {
	if x != nil {
		return x.CprGlobalSpeed
	}
	return 0
}

func (x *StatisticEntry) GetCprGlobalSkipped() uint64 {
	if x != nil {
		return x.CprGlobalSkipped
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalOk() uint64 {
	if x != nil {
		return x.CprLocalOk
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalAircraftRelative() uint64 {
	if x != nil {
		return x.CprLocalAircraftRelative
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalReceiverRelative() uint64 {
	if x != nil {
		return x.CprLocalReceiverRelative
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalSkipped() uint64 {
	if x != nil {
		return x.CprLocalSkipped
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalRange() uint64 {
	if x != nil {
		return x.CprLocalRange
	}
	return 0
}

func (x *StatisticEntry) GetCprLocalSpeed() uint64 {
	if x != nil {
		return x.CprLocalSpeed
	}
	return 0
}

func (x *StatisticEntry) GetCprFiltered() uint64 {
	if x != nil {
		return x.CprFiltered
	}
	return 0
}

func (x *StatisticEntry) GetRemoteModeac() uint64 {
	if x != nil {
		return x.RemoteModeac
	}
	return 0
}

func (x *StatisticEntry) GetRemoteModes() uint64 {
	if x != nil {
		return x.RemoteModes
	}
	return 0
}

func (x *StatisticEntry) GetRemoteBad() uint64 {
	if x != nil {
		return x.RemoteBad
	}
	return 0
}

func (x *StatisticEntry) GetRemoteUnknownIcao() uint64 {
	if x != nil {
		return x.RemoteUnknownIcao
	}
	return 0
}

func (x *StatisticEntry) GetRemoteAccepted() uint64 {
	if x != nil {
		return x.RemoteAccepted
	}
	return 0
}

func (x *StatisticEntry) GetLocalSamplesProcessed() uint64 {
	if x != nil {
		return x.LocalSamplesProcessed
	}
	return 0
}

func (x *StatisticEntry) GetLocalSamplesDropped() uint64 {
	if x != nil {
		return x.LocalSamplesDropped
	}
	return 0
}

func (x *StatisticEntry) GetLocalModeac() uint64 {
	if x != nil {
		return x.LocalModeac
	}
	return 0
}

func (x *StatisticEntry) GetLocalModes() uint64 {
	if x != nil {
		return x.LocalModes
	}
	return 0
}

func (x *StatisticEntry) GetLocalBad() uint64 {
	if x != nil {
		return x.LocalBad
	}
	return 0
}

func (x *StatisticEntry) GetLocalUnknownIcao() uint64 {
	if x != nil {
		return x.LocalUnknownIcao
	}
	return 0
}

func (x *StatisticEntry) GetLocalStrongSignals() uint64 {
	if x != nil {
		return x.LocalStrongSignals
	}
	return 0
}

func (x *StatisticEntry) GetLocalSignal() float32 {
	if x != nil {
		return x.LocalSignal
	}
	return 0
}

func (x *StatisticEntry) GetLocalNoise() float32 {
	if x != nil {
		return x.LocalNoise
	}
	return 0
}

func (x *StatisticEntry) GetLocalPeakSignal() float32 {
	if x != nil {
		return x.LocalPeakSignal
	}
	return 0
}

func (x *StatisticEntry) GetLocalAccepted() uint64 {
	if x != nil {
		return x.LocalAccepted
	}
	return 0
}

//*
// Readsb receiver statistics.
type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latest     *StatisticEntry   `protobuf:"bytes,1,opt,name=latest,proto3" json:"latest,omitempty"`                                                                                                                     // covers the time between the end of the "last1min" period and the current time.
	Last_1Min  *StatisticEntry   `protobuf:"bytes,2,opt,name=last_1min,json=last1min,proto3" json:"last_1min,omitempty"`                                                                                                 // covers a recent 15-minute period. As above, this may be up to 1 minute out of date.
	Last_5Min  *StatisticEntry   `protobuf:"bytes,3,opt,name=last_5min,json=last5min,proto3" json:"last_5min,omitempty"`                                                                                                 // covers a recent 5-minute period. As above, this may be up to 1 minute out of date.
	Last_15Min *StatisticEntry   `protobuf:"bytes,4,opt,name=last_15min,json=last15min,proto3" json:"last_15min,omitempty"`                                                                                              // covers a recent 1-minute period. This may be up to 1 minute out of date (i.e. "end" may be up to 1 minute old).
	Total      *StatisticEntry   `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`                                                                                                                       // covers the entire period from when readsb was started up to the current time
	PolarRange map[uint32]uint32 `protobuf:"bytes,6,rep,name=polar_range,json=polarRange,proto3" json:"polar_range,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // maximum range per bearing, 0 to 359 degree, default resolution 5 degree.
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{5}
}

func (x *Statistics) GetLatest() *StatisticEntry {
	if x != nil {
		return x.Latest
	}
	return nil
}

func (x *Statistics) GetLast_1Min() *StatisticEntry {
	if x != nil {
		return x.Last_1Min
	}
	return nil
}

func (x *Statistics) GetLast_5Min() *StatisticEntry {
	if x != nil {
		return x.Last_5Min
	}
	return nil
}

func (x *Statistics) GetLast_15Min() *StatisticEntry {
	if x != nil {
		return x.Last_15Min
	}
	return nil
}

func (x *Statistics) GetTotal() *StatisticEntry {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Statistics) GetPolarRange() map[uint32]uint32 {
	if x != nil {
		return x.PolarRange
	}
	return nil
}

// Set of engaged automation modes.
type AircraftMeta_NavModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autopilot bool `protobuf:"varint,1,opt,name=autopilot,proto3" json:"autopilot,omitempty"`
	Vnav      bool `protobuf:"varint,2,opt,name=vnav,proto3" json:"vnav,omitempty"`
	Althold   bool `protobuf:"varint,3,opt,name=althold,proto3" json:"althold,omitempty"`
	Approach  bool `protobuf:"varint,4,opt,name=approach,proto3" json:"approach,omitempty"`
	Lnav      bool `protobuf:"varint,5,opt,name=lnav,proto3" json:"lnav,omitempty"`
	Tcas      bool `protobuf:"varint,6,opt,name=tcas,proto3" json:"tcas,omitempty"`
}

func (x *AircraftMeta_NavModes) Reset() {
	*x = AircraftMeta_NavModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftMeta_NavModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftMeta_NavModes) ProtoMessage() {}

func (x *AircraftMeta_NavModes) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftMeta_NavModes.ProtoReflect.Descriptor instead.
func (*AircraftMeta_NavModes) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AircraftMeta_NavModes) GetAutopilot() bool {
	if x != nil {
		return x.Autopilot
	}
	return false
}

func (x *AircraftMeta_NavModes) GetVnav() bool {
	if x != nil {
		return x.Vnav
	}
	return false
}

func (x *AircraftMeta_NavModes) GetAlthold() bool {
	if x != nil {
		return x.Althold
	}
	return false
}

func (x *AircraftMeta_NavModes) GetApproach() bool {
	if x != nil {
		return x.Approach
	}
	return false
}

func (x *AircraftMeta_NavModes) GetLnav() bool {
	if x != nil {
		return x.Lnav
	}
	return false
}

func (x *AircraftMeta_NavModes) GetTcas() bool {
	if x != nil {
		return x.Tcas
	}
	return false
}

// List of valid source fields for each parameter.
type AircraftMeta_ValidSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callsign       uint32 `protobuf:"varint,100,opt,name=callsign,proto3" json:"callsign,omitempty"`
	Altitude       uint32 `protobuf:"varint,101,opt,name=altitude,proto3" json:"altitude,omitempty"`
	AltGeom        uint32 `protobuf:"varint,102,opt,name=alt_geom,json=altGeom,proto3" json:"alt_geom,omitempty"`
	Gs             uint32 `protobuf:"varint,103,opt,name=gs,proto3" json:"gs,omitempty"`
	Ias            uint32 `protobuf:"varint,104,opt,name=ias,proto3" json:"ias,omitempty"`
	Tas            uint32 `protobuf:"varint,105,opt,name=tas,proto3" json:"tas,omitempty"`
	Mach           uint32 `protobuf:"varint,106,opt,name=mach,proto3" json:"mach,omitempty"`
	Track          uint32 `protobuf:"varint,107,opt,name=track,proto3" json:"track,omitempty"`
	TrackRate      uint32 `protobuf:"varint,108,opt,name=track_rate,json=trackRate,proto3" json:"track_rate,omitempty"`
	Roll           uint32 `protobuf:"varint,109,opt,name=roll,proto3" json:"roll,omitempty"`
	MagHeading     uint32 `protobuf:"varint,110,opt,name=mag_heading,json=magHeading,proto3" json:"mag_heading,omitempty"`
	TrueHeading    uint32 `protobuf:"varint,111,opt,name=true_heading,json=trueHeading,proto3" json:"true_heading,omitempty"`
	BaroRate       uint32 `protobuf:"varint,112,opt,name=baro_rate,json=baroRate,proto3" json:"baro_rate,omitempty"`
	GeomRate       uint32 `protobuf:"varint,113,opt,name=geom_rate,json=geomRate,proto3" json:"geom_rate,omitempty"`
	Squawk         uint32 `protobuf:"varint,114,opt,name=squawk,proto3" json:"squawk,omitempty"`
	Emergency      uint32 `protobuf:"varint,115,opt,name=emergency,proto3" json:"emergency,omitempty"`
	NavQnh         uint32 `protobuf:"varint,116,opt,name=nav_qnh,json=navQnh,proto3" json:"nav_qnh,omitempty"`
	NavAltitudeMcp uint32 `protobuf:"varint,117,opt,name=nav_altitude_mcp,json=navAltitudeMcp,proto3" json:"nav_altitude_mcp,omitempty"`
	NavAltitudeFms uint32 `protobuf:"varint,118,opt,name=nav_altitude_fms,json=navAltitudeFms,proto3" json:"nav_altitude_fms,omitempty"`
	NavHeading     uint32 `protobuf:"varint,119,opt,name=nav_heading,json=navHeading,proto3" json:"nav_heading,omitempty"`
	NavModes       uint32 `protobuf:"varint,120,opt,name=nav_modes,json=navModes,proto3" json:"nav_modes,omitempty"`
	Lat            uint32 `protobuf:"varint,121,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon            uint32 `protobuf:"varint,122,opt,name=lon,proto3" json:"lon,omitempty"`
	Nic            uint32 `protobuf:"varint,123,opt,name=nic,proto3" json:"nic,omitempty"`
	Rc             uint32 `protobuf:"varint,124,opt,name=rc,proto3" json:"rc,omitempty"`
	NicBaro        uint32 `protobuf:"varint,125,opt,name=nic_baro,json=nicBaro,proto3" json:"nic_baro,omitempty"`
	NacP           uint32 `protobuf:"varint,126,opt,name=nac_p,json=nacP,proto3" json:"nac_p,omitempty"`
	NacV           uint32 `protobuf:"varint,127,opt,name=nac_v,json=nacV,proto3" json:"nac_v,omitempty"`
	Sil            uint32 `protobuf:"varint,128,opt,name=sil,proto3" json:"sil,omitempty"`
	SilType        uint32 `protobuf:"varint,129,opt,name=sil_type,json=silType,proto3" json:"sil_type,omitempty"`
	Gva            uint32 `protobuf:"varint,130,opt,name=gva,proto3" json:"gva,omitempty"`
	Sda            uint32 `protobuf:"varint,131,opt,name=sda,proto3" json:"sda,omitempty"`
	Wind           uint32 `protobuf:"varint,132,opt,name=wind,proto3" json:"wind,omitempty"`
}

func (x *AircraftMeta_ValidSource) Reset() {
	*x = AircraftMeta_ValidSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_readsb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftMeta_ValidSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftMeta_ValidSource) ProtoMessage() {}

func (x *AircraftMeta_ValidSource) ProtoReflect() protoreflect.Message {
	mi := &file_readsb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftMeta_ValidSource.ProtoReflect.Descriptor instead.
func (*AircraftMeta_ValidSource) Descriptor() ([]byte, []int) {
	return file_readsb_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AircraftMeta_ValidSource) GetCallsign() uint32 {
	if x != nil {
		return x.Callsign
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetAltGeom() uint32 {
	if x != nil {
		return x.AltGeom
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetGs() uint32 {
	if x != nil {
		return x.Gs
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetIas() uint32 {
	if x != nil {
		return x.Ias
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetTas() uint32 {
	if x != nil {
		return x.Tas
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetMach() uint32 {
	if x != nil {
		return x.Mach
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetTrack() uint32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetTrackRate() uint32 {
	if x != nil {
		return x.TrackRate
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetRoll() uint32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetMagHeading() uint32 {
	if x != nil {
		return x.MagHeading
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetTrueHeading() uint32 {
	if x != nil {
		return x.TrueHeading
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetBaroRate() uint32 {
	if x != nil {
		return x.BaroRate
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetGeomRate() uint32 {
	if x != nil {
		return x.GeomRate
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetSquawk() uint32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetEmergency() uint32 {
	if x != nil {
		return x.Emergency
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNavQnh() uint32 {
	if x != nil {
		return x.NavQnh
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNavAltitudeMcp() uint32 {
	if x != nil {
		return x.NavAltitudeMcp
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNavAltitudeFms() uint32 {
	if x != nil {
		return x.NavAltitudeFms
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNavHeading() uint32 {
	if x != nil {
		return x.NavHeading
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNavModes() uint32 {
	if x != nil {
		return x.NavModes
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetLat() uint32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetLon() uint32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNic() uint32 {
	if x != nil {
		return x.Nic
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetRc() uint32 {
	if x != nil {
		return x.Rc
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNicBaro() uint32 {
	if x != nil {
		return x.NicBaro
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNacP() uint32 {
	if x != nil {
		return x.NacP
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetNacV() uint32 {
	if x != nil {
		return x.NacV
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetSil() uint32 {
	if x != nil {
		return x.Sil
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetSilType() uint32 {
	if x != nil {
		return x.SilType
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetGva() uint32 {
	if x != nil {
		return x.Gva
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetSda() uint32 {
	if x != nil {
		return x.Sda
	}
	return 0
}

func (x *AircraftMeta_ValidSource) GetWind() uint32 {
	if x != nil {
		return x.Wind
	}
	return 0
}

var File_readsb_proto protoreflect.FileDescriptor

var file_readsb_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e,
	0x17, 0x0a, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x71, 0x75,
	0x61, 0x77, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x42, 0x61, 0x72, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x67, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x61, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x69, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x09,
	0x61, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x74,
	0x47, 0x65, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x72, 0x6f, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6d, 0x61, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x76, 0x5f, 0x71, 0x6e, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6e, 0x61, 0x76, 0x51, 0x6e, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x76,
	0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x4d, 0x63, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x76, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x5f, 0x66, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e,
	0x61, 0x76, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x46, 0x6d, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x61, 0x76, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x72, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x5f, 0x62, 0x61, 0x72, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x69,
	0x63, 0x42, 0x61, 0x72, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x61, 0x63, 0x5f, 0x70, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x61,
	0x63, 0x5f, 0x76, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x56, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x69,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x73, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x76, 0x61, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x67, 0x76, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x61, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x64, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x69,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x61, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x4e, 0x61, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x08, 0x6e, 0x61, 0x76, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x4e, 0x61, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6e, 0x61, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6e,
	0x61, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6e, 0x61, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6e, 0x61, 0x76, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x63, 0x61, 0x73,
	0x1a, 0xc5, 0x06, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x5f,
	0x67, 0x65, 0x6f, 0x6d, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x47,
	0x65, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x61, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x69, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x73, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x75,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x72,
	0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x6d, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x76, 0x5f,
	0x71, 0x6e, 0x68, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x61, 0x76, 0x51, 0x6e,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x76, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x6d, 0x63, 0x70, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x61, 0x76,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d, 0x63, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x61, 0x76, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6d, 0x73, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x46, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x76, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x48,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x61, 0x76, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x63, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x5f, 0x62, 0x61, 0x72, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x69, 0x63,
	0x42, 0x61, 0x72, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x61, 0x63, 0x5f, 0x70, 0x18, 0x7e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x61, 0x63,
	0x5f, 0x76, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x56, 0x12, 0x11,
	0x0a, 0x03, 0x73, 0x69, 0x6c, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x03, 0x67, 0x76, 0x61, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x76, 0x61,
	0x12, 0x11, 0x0a, 0x03, 0x73, 0x64, 0x61, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x64, 0x61, 0x12, 0x13, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x09, 0x41, 0x69, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47, 0x5f, 0x41, 0x49, 0x52, 0x42, 0x4f,
	0x52, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x43, 0x45,
	0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x44, 0x53,
	0x42, 0x5f, 0x49, 0x43, 0x41, 0x4f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x49, 0x43, 0x41, 0x4f, 0x5f, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x44, 0x53, 0x52, 0x5f, 0x49, 0x43, 0x41,
	0x4f, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x49, 0x53, 0x42,
	0x5f, 0x49, 0x43, 0x41, 0x4f, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x41, 0x44, 0x53, 0x42, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x44, 0x53, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x49, 0x53, 0x42, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x54, 0x49, 0x53, 0x42, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x09, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x47, 0x55, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x46, 0x55, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x44, 0x4f, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e,
	0x4c, 0x41, 0x57, 0x46, 0x55, 0x4c, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x07, 0x53, 0x69, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x22,
	0x64, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x61,
	0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x42, 0x61, 0x72,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x0e, 0x22, 0xf9, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x47, 0x70, 0x73, 0x53, 0x61, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x67, 0x70, 0x73,
	0x5f, 0x68, 0x64, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x47, 0x70, 0x73, 0x48, 0x64, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x9f, 0x0e, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x61, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4e,
	0x65, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x5f, 0x6d, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4d, 0x6c,
	0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x69, 0x73, 0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x54, 0x69, 0x73, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x70, 0x75, 0x44, 0x65, 0x6d, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x70, 0x75, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x70, 0x75, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x70, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x70, 0x72, 0x5f, 0x61, 0x69, 0x72, 0x62, 0x6f, 0x72, 0x6e, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x70, 0x72, 0x41, 0x69, 0x72, 0x62, 0x6f,
	0x72, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x72, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6f, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x70, 0x72, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x72, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x70, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x70, 0x72, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x70, 0x72, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x70, 0x72, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x63, 0x70, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x70, 0x72, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63,
	0x70, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6b, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x70, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x6b, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x70, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x70, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x70, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x70, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x70,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x70, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x70, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x61, 0x63, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x61, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x62, 0x61, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x42, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x49, 0x63, 0x61, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x61, 0x63, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x61, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x64, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x63, 0x61,
	0x6f, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x63, 0x61, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x31, 0x6d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x35, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x35, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x35, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x50, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x6f, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_readsb_proto_rawDescOnce sync.Once
	file_readsb_proto_rawDescData = file_readsb_proto_rawDesc
)

func file_readsb_proto_rawDescGZIP() []byte {
	file_readsb_proto_rawDescOnce.Do(func() {
		file_readsb_proto_rawDescData = protoimpl.X.CompressGZIP(file_readsb_proto_rawDescData)
	})
	return file_readsb_proto_rawDescData
}

var file_readsb_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_readsb_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_readsb_proto_goTypes = []interface{}{
	(AircraftMeta_AirGround)(0),      // 0: AircraftMeta.AirGround
	(AircraftMeta_AddrType)(0),       // 1: AircraftMeta.AddrType
	(AircraftMeta_Emergency)(0),      // 2: AircraftMeta.Emergency
	(AircraftMeta_SilType)(0),        // 3: AircraftMeta.SilType
	(*AircraftMeta)(nil),             // 4: AircraftMeta
	(*AircraftHistory)(nil),          // 5: AircraftHistory
	(*AircraftsUpdate)(nil),          // 6: AircraftsUpdate
	(*Receiver)(nil),                 // 7: Receiver
	(*StatisticEntry)(nil),           // 8: StatisticEntry
	(*Statistics)(nil),               // 9: Statistics
	(*AircraftMeta_NavModes)(nil),    // 10: AircraftMeta.NavModes
	(*AircraftMeta_ValidSource)(nil), // 11: AircraftMeta.ValidSource
	nil,                              // 12: Statistics.PolarRangeEntry
}
var file_readsb_proto_depIdxs = []int32{
	0,  // 0: AircraftMeta.air_ground:type_name -> AircraftMeta.AirGround
	1,  // 1: AircraftMeta.addr_type:type_name -> AircraftMeta.AddrType
	2,  // 2: AircraftMeta.emergency:type_name -> AircraftMeta.Emergency
	3,  // 3: AircraftMeta.sil_type:type_name -> AircraftMeta.SilType
	10, // 4: AircraftMeta.nav_modes:type_name -> AircraftMeta.NavModes
	11, // 5: AircraftMeta.valid_source:type_name -> AircraftMeta.ValidSource
	5,  // 6: AircraftsUpdate.history:type_name -> AircraftHistory
	4,  // 7: AircraftsUpdate.aircraft:type_name -> AircraftMeta
	8,  // 8: Statistics.latest:type_name -> StatisticEntry
	8,  // 9: Statistics.last_1min:type_name -> StatisticEntry
	8,  // 10: Statistics.last_5min:type_name -> StatisticEntry
	8,  // 11: Statistics.last_15min:type_name -> StatisticEntry
	8,  // 12: Statistics.total:type_name -> StatisticEntry
	12, // 13: Statistics.polar_range:type_name -> Statistics.PolarRangeEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_readsb_proto_init() }
func file_readsb_proto_init() {
	if File_readsb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_readsb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftMeta_NavModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_readsb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftMeta_ValidSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_readsb_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_readsb_proto_goTypes,
		DependencyIndexes: file_readsb_proto_depIdxs,
		EnumInfos:         file_readsb_proto_enumTypes,
		MessageInfos:      file_readsb_proto_msgTypes,
	}.Build()
	File_readsb_proto = out.File
	file_readsb_proto_rawDesc = nil
	file_readsb_proto_goTypes = nil
	file_readsb_proto_depIdxs = nil
}
